{"version":3,"sources":["Components/ALink.jsx","Components/Menu.jsx","Components/Car.jsx","Components/CarChart.jsx","Components/CarList.jsx","App.js","serviceWorker.js","index.js"],"names":["ALink","label","to","styles","match","useRouteMatch","path","extact","className","css","a","active","MENU","StyleSheet","create","ul","listStyle","padding","width","height","margin","position","backgroundColor","li","display","justifyContent","alignItems","color","textDecoration","fontSize","transition","Menu","map","brand","key","CarTable","useState","cars","setCars","useEffect","data","brandData","models","modelData","index","model","numberOfCars","valueInBaht","toLocaleString","Chart","register","registerables","CarChart","jsonData","selectedBrandIndex","setSelectedBrandIndex","chartType","setChartType","chartRef","useRef","chartInstance","totalCars","parseInt","reduce","total","length","canvas","current","ctx","getContext","destroy","type","labels","datasets","borderColor","borderWidth","options","responsive","plugins","legend","tooltip","callbacks","tooltipItem","raw","scales","x","stacked","y","style","textAlign","marginBottom","htmlFor","id","onChange","e","target","value","onClick","ref","currencyFormat","Intl","NumberFormat","currency","CarList","carsData","setCarsData","saved","localStorage","getItem","JSON","parse","highlightedCars","setHighlightedCars","carData","brandIndex","car","format","prevState","newState","find","c","filter","setItem","stringify","toggleHighlight","marginLeft","border","cursor","BrandRoutes","menu","useParams","Car","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7a4834d.chunk.js","sourcesContent":["import React from \"react\";\nimport { useRouteMatch, Link } from \"react-router-dom\";\nimport { css } from \"aphrodite/no-important\";\n\nconst ALink = ({ label, to, styles }) => {\n\tconst match = useRouteMatch({ path: to, extact: true });\n\n\treturn (\n\t\t<Link to={to} className={css(styles.a, match && styles.active)}>\n\t\t\t{label}\n\t\t</Link>\n\t);\n};\n\nexport default ALink;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite/no-important\";\nimport ALink from \"./ALink\";\n\nconst MENU = [\"Dashboard\", \"Highlighted Car\"]; // Updated to show only two brands\nconst styles = StyleSheet.create({\n    ul: {\n        listStyle: \"none\",\n        padding: \"0\",\n        width: \"100%\",\n        height: \"60px\",\n        margin: \"auto\",\n        position: \"relative\",\n        backgroundColor: \"#2c3e50\",\n    },\n    li: {\n        display: \"inline-block\",\n        width: \"50%\", // Adjusted width to fit two items\n        height: \"100%\",\n        margin: \"0\",\n        padding: \"0\",\n    },\n    a: {\n        display: \"flex\",\n        width: \"100%\",\n        height: \"100%\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        color: \"#fff\",\n        textDecoration: \"none\",\n        position: \"relative\",\n        fontSize: \"18px\",\n        transition: \"left .4s, background-color .4s\",\n        \":hover\": {\n            backgroundColor: \"#3498db\",\n        },\n    },\n    active: {\n        backgroundColor: \"#e74c3c\",\n    },\n});\n\nconst Menu = () => {\n    return (\n        <div>\n            <ul className={css(styles.ul)}>\n                {MENU.map((brand) => (\n                    <li className={css(styles.li)} key={brand}>\n                        <ALink label={brand} to={`/${brand}`} styles={styles} />\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default Menu;\n","import React, { useState, useEffect } from 'react';\nimport data from '../data/data.json';\n\nconst CarTable = () => {\n  const [cars, setCars] = useState([]);\n\n  useEffect(() => {\n    // Simulate fetching data\n    setCars(data);\n  }, []);\n\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>Brand</th>\n            <th>Model</th>\n            <th>Number of Cars</th>\n            <th>Value (Baht)</th>\n          </tr>\n        </thead>\n        <tbody>\n          {cars.map((brandData) =>\n            brandData.models.map((modelData, index) => (\n              <tr key={index}>\n                <td>{brandData.brand}</td>\n                <td>{modelData.model}</td>\n                <td>{modelData.numberOfCars}</td>\n                <td>{modelData.valueInBaht.toLocaleString()}</td>\n              </tr>\n            ))\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default CarTable;","import React, { useRef, useEffect, useState } from 'react';\nimport { Chart, registerables } from 'chart.js';\nimport jsonData from '../data/data.json'; // Adjust the path based on your file structure\n\nChart.register(...registerables);\n\nconst CarChart = () => {\n  const [data] = useState(jsonData);\n  const [selectedBrandIndex, setSelectedBrandIndex] = useState('');\n  const [chartType, setChartType] = useState('pie'); // State to toggle between 'pie' and 'bar'\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null); // Store the chart instance\n\n  // Calculate the total number of cars for the selected brand\n  const totalCars = selectedBrandIndex !== ''\n    ? data[parseInt(selectedBrandIndex, 10)].models.reduce((total, model) => total + model.numberOfCars, 0)\n    : 0;\n\n  useEffect(() => {\n    if (selectedBrandIndex !== '' && data.length > 0) {\n      const index = parseInt(selectedBrandIndex, 10);\n      const brand = data[index];\n      const canvas = chartRef.current;\n      if (canvas) {\n        const ctx = canvas.getContext('2d');\n\n        // Destroy the previous chart instance if it exists\n        if (chartInstance.current) {\n          chartInstance.current.destroy();\n        }\n\n        // Create a new chart instance based on selected chart type\n        chartInstance.current = new Chart(ctx, {\n          type: chartType,\n          data: {\n            labels: brand.models.map(model => model.model),\n            datasets: chartType === 'pie'\n              ? [{\n                  label: 'Number of Cars',\n                  data: brand.models.map(model => model.numberOfCars),\n                  backgroundColor: [\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(153, 102, 255, 0.2)',\n                    'rgba(255, 159, 64, 0.2)',\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(255, 206, 86, 0.2)'\n                  ],\n                  borderColor: [\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)'\n                  ],\n                  borderWidth: 1\n                }]\n              : [{\n                  label: 'Number of Cars',\n                  data: brand.models.map(model => model.numberOfCars),\n                  backgroundColor: [\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(153, 102, 255, 0.2)',\n                    'rgba(255, 159, 64, 0.2)',\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(255, 206, 86, 0.2)'\n                  ],\n                  borderColor: [\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)'\n                  ],\n                  borderWidth: 1\n                }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'top',\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(tooltipItem) {\n                    return tooltipItem.label + ': ' + tooltipItem.raw + ' cars';\n                  }\n                }\n              }\n            },\n            // Bar chart specific options\n            scales: chartType === 'bar' ? {\n              x: {\n                stacked: true\n              },\n              y: {\n                stacked: true\n              }\n            } : {}\n          }\n        });\n      }\n    }\n\n    // Cleanup function to destroy chart instance when component unmounts\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [selectedBrandIndex, data, chartType]);\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <div style={{ marginBottom: '20px' }}><br></br>\n        <label htmlFor=\"brandSelect\">Choose a brand: </label>\n        <select\n          id=\"brandSelect\"\n          onChange={(e) => setSelectedBrandIndex(e.target.value)}\n          value={selectedBrandIndex}\n        >\n          <option value=\"\">Select a brand</option>\n          {data.map((brand, index) => (\n            <option key={index} value={index}>{brand.brand}</option>\n          ))}\n        </select>\n      </div>\n      \n      <div style={{ marginBottom: '20px' }}>\n        <button onClick={() => setChartType('pie')}>Pie Chart</button>&nbsp;\n        <button onClick={() => setChartType('bar')}>Stacked Bar Chart</button>\n      </div>\n\n      {selectedBrandIndex !== '' && (\n        <div style={{ width: '600px', margin: '0 auto' }}>\n          <h3>{data[selectedBrandIndex].brand}</h3>\n          <p>Total number of cars: <strong>{totalCars}</strong></p>\n          <canvas ref={chartRef}></canvas>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CarChart;\n","import React, { useState, useEffect } from 'react';\nimport carData from '../data/data.json';\n\nconst currencyFormat = new Intl.NumberFormat('th-TH', {\n  style: 'currency',\n  currency: 'THB'\n});\n\nconst CarList = () => {\n  const [carsData, setCarsData] = useState([]);\n  const [highlightedCars, setHighlightedCars] = useState(() => {\n    const saved = localStorage.getItem('highlightedCars');\n    return saved ? JSON.parse(saved) : [];\n  });\n\n  useEffect(() => {\n    setCarsData(carData);\n  }, []);\n\n  const toggleHighlight = (car) => {\n    setHighlightedCars(prevState => {\n      const isHighlighted = prevState.find(c => c.model === car.model);\n      const newState = isHighlighted\n        ? prevState.filter(c => c.model !== car.model)\n        : [...prevState, car];\n\n      localStorage.setItem('highlightedCars', JSON.stringify(newState));\n      return newState;\n    });\n  };\n\n  return (\n    <div>\n      <h1>Car List</h1>\n      <div>\n        {carsData.map((brandData, brandIndex) => (\n          <div key={brandIndex}>\n            <h2>{brandData.brand}</h2>\n            <ul>\n              {brandData.models.map((car, index) => (\n                <li key={index} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\n                  <div>\n                    <span>\n                      {car.model} - {car.numberOfCars} cars - {currencyFormat.format(car.valueInBaht)}\n                    </span>\n                    <button\n                      onClick={() => toggleHighlight(car)}\n                      style={{\n                        backgroundColor: highlightedCars.find(c => c.model === car.model) ? 'green' : 'grey',\n                        color: 'white',\n                        marginLeft: '10px',\n                        padding: '5px 10px',\n                        border: 'none',\n                        cursor: 'pointer'\n                      }}\n                    >\n                      {highlightedCars.find(c => c.model === car.model) ? 'Unhighlight' : 'Highlight'}\n                    </button>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        ))}\n      </div>\n\n      <h2>Highlighted Cars</h2>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Model</th>\n            <th>Value (Baht)</th>\n          </tr>\n        </thead>\n        <tbody>\n          {highlightedCars.map((car, index) => (\n            <tr key={index}>\n              <td>{car.model}</td>\n              <td>{currencyFormat.format(car.valueInBaht)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default CarList;","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, useParams, } from \"react-router-dom\";\nimport Menu from \"./Components/Menu\";\nimport CarTable from \"./Components/Car\";\nimport CarChart from \"./Components/CarChart\";\nimport CarList from \"./Components/CarList\";\n\nfunction BrandRoutes() {\n  const { menu } = useParams();\n\n  return (\n    <div>\n      {menu === \"Dashboard\" && (\n        <>\n          <CarTable />\n          <CarChart />\n        </>\n      )}\n      {menu === \"Highlighted Car\" && <CarList />}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Menu />\n        <Switch>\n          <Route path=\"/error\">\n            {/* <Error /> */}\n            <div>Error Page</div>\n          </Route>\n          <Route path=\"/:menu\">\n            <BrandRoutes />\n          </Route>\n          <Route path=\"/\">\n          <CarTable />\n          <CarChart />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}