{"version":3,"sources":["Components/ALink.jsx","Components/Menu.jsx","Components/Model.jsx","Components/SubMenu.jsx","Components/Brand.jsx","App.js","serviceWorker.js","index.js"],"names":["ALink","label","to","styles","match","useRouteMatch","path","extact","className","css","a","active","BRANDS","StyleSheet","create","ul","listStyle","padding","width","height","margin","position","backgroundColor","li","display","justifyContent","alignItems","color","textDecoration","fontSize","transition","Menu","map","brand","key","container","h3","fontWeight","p","Model","model","useParams","MODELS_BY_BRAND","Mercedes","Porsche","SubMenu","url","conatiner","row","h1","Brand","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9558e347.chunk.js","sourcesContent":["import React from \"react\";\nimport { useRouteMatch, Link } from \"react-router-dom\";\nimport { css } from \"aphrodite/no-important\";\n\nconst ALink = ({ label, to, styles }) => {\n\tconst match = useRouteMatch({ path: to, extact: true });\n\n\treturn (\n\t\t<Link to={to} className={css(styles.a, match && styles.active)}>\n\t\t\t{label}\n\t\t</Link>\n\t);\n};\n\nexport default ALink;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite/no-important\";\nimport ALink from \"./ALink\";\n\nconst BRANDS = [\"Mercedes\",\"Porsche\",];\nconst styles = StyleSheet.create({\n\tul: {\n\t\tlistStyle: \"none\",\n\t\tpadding: \"0\",\n\t\twidth: \"100%\",\n\t\theight: \"60px\",\n\t\tmargin: \"auto\",\n\t\tposition: \"relative\",\n\t\tbackgroundColor: \"#2c3e50\",\n\t},\n\tli: {\n\t\tdisplay: \"inline-block\",\n\t\twidth: \"25%\",\n\t\theight: \"100%\",\n\t\tmargin: \"0\",\n\t\tpadding: \"0\",\n\t},\n\ta: {\n\t\tdisplay: \"flex\",\n\t\twidth: \"100%\",\n\t\theight: \"100%\",\n\t\tjustifyContent: \"center\",\n\t\talignItems: \"center\",\n\t\tcolor: \"#fff\",\n\t\ttextDecoration: \"none\",\n\t\tposition: \"relative\",\n\t\tfontSize: \"18px\",\n\t\ttransition: \"left .4s, background-color .4s\",\n\t\t\":hover\": {\n\t\t\tbackgroundColor: \"#3498db\",\n\t\t},\n\t},\n\tactive: {\n\t\tbackgroundColor: \"#e74c3c\",\n\t},\n});\n\nconst Menu = () => {\n\treturn (\n\t\t<div>\n\t\t\t<ul className={css(styles.ul)}>\n\t\t\t\t{BRANDS.map((brand) => (\n\t\t\t\t\t<li className={css(styles.li)} key={brand}>\n\t\t\t\t\t\t<ALink label={brand} to={`/${brand}`} styles={styles} />\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n};\n\nexport default Menu;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { StyleSheet, css } from \"aphrodite/no-important\";\n\nconst styles = StyleSheet.create({\n\tcontainer: {},\n\th3: {\n\t\tfontWeight: \"400\",\n\t\tfontSize: \"24px\",\n\t\tmargin: \"0px\",\n\t},\n\tp: {\n\t\tfontWeight: \"300\",\n\t\tfontSize: \"16px\",\n\t},\n});\n\nconst Model = () => {\n\tconst { model } = useParams();\n\treturn (\n\t\t<div className={css(styles.container)}>\n\t\t\t<h3 className={css(styles.h3)}>{model}</h3>\n\t\t\t<p className={css(styles.p)}>\n\t\t\t\tLorem ipsum dolor sit amet consectetur adipisicing elit. Ex velit unde\n\t\t\t\tnemo cum veniam esse non accusamus a aliquid. Maiores possimus nam\n\t\t\t\tdoloribus labore in sequi! Officia quasi eveniet corrupti!\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n\nexport default Model;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite/no-important\";\nimport { useParams, useRouteMatch, Redirect } from \"react-router-dom\";\n\nimport ALink from \"./ALink\";\n\nconst MODELS_BY_BRAND = {\n\tMercedes: [\"A-Class\", \"C-Class\", \"E-Class\", \"S-Class\"],\n\t// Ferrari: [\"Tributo\", \"812\", \"GTC4\", \"Spider\"],\n\tPorsche: [\"Cayman\", \"911\", \"Panamera\", \"Taycan\"],\n\t// Lamborghini: [\"Reventon\", \"Veneno\", \"Centenario\", \"Gallardo\"],\n};\nconst styles = StyleSheet.create({\n\tul: {\n\t\tlistStyle: \"none\",\n\t\tpadding: \"0px\",\n\t\tmargin: \"0px\",\n\t},\n\tli: {\n\t\tmargin: \"2.5px 0\",\n\t\twidth: \"100px\",\n\t},\n\ta: {\n\t\tdisplay: \"flex\",\n\t\theight: \"100%\",\n\t\tpadding: \"8px\",\n\t\tjustifyContent: \"left\",\n\t\talignItems: \"center\",\n\t\tcolor: \"#fff\",\n\t\ttextDecoration: \"none\",\n\t\tfontSize: \"14px\",\n\t\tbackgroundColor: \"#6b7784\",\n\t\ttransition: \"left .4s, background-color .4s\",\n\t\t\":hover\": {\n\t\t\tbackgroundColor: \"#70b6e5\",\n\t\t},\n\t},\n\tactive: {\n\t\tbackgroundColor: \"#ee8176\",\n\t},\n});\nconst SubMenu = () => {\n\tconst { brand } = useParams();\n\tconst { url } = useRouteMatch();\n\tconst models = MODELS_BY_BRAND[brand];\n\n\tif (!models) {\n\t\treturn <Redirect to=\"/error\" />;\n\t}\n\n\treturn (\n\t\t<ul className={css(styles.ul)}>\n\t\t\t{MODELS_BY_BRAND[brand].map((model) => (\n\t\t\t\t<li key={model} className={css(styles.li)}>\n\t\t\t\t\t<ALink label={model} to={`${url}/${model}`} styles={styles} />\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\t);\n};\n\nexport default SubMenu;\n","import React, { Fragment } from \"react\";\nimport { StyleSheet, css } from \"aphrodite/no-important\";\nimport { useParams, useRouteMatch, Switch, Route } from \"react-router-dom\";\n\nimport Model from \"./Model\";\nimport SubMenu from \"./SubMenu\";\n\nconst styles = StyleSheet.create({\n\tconatiner: {\n\t\tdisplay: \"flex\",\n\t},\n\trow: {\n\t\tpadding: \"5px\",\n\t},\n\th1: {\n\t\tfontWeight: \"300\",\n\t\tmargin: \"10px 20px\",\n\t\tfontSize: \"45px\",\n\t\tcolor: \"#a1352a\",\n\t},\n});\n\nconst Brand = () => {\n\tconst { brand } = useParams();\n\tconst { url } = useRouteMatch();\n\treturn (\n\t\t<Fragment>\n\t\t\t<h1 className={css(styles.h1)}>{brand}</h1>\n\t\t\t<div className={css(styles.conatiner)}>\n\t\t\t\t<SubMenu />\n\t\t\t\t<div className={css(styles.row)}>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path={`${url}/:model`}>\n\t\t\t\t\t\t\t<Model />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n};\n\nexport default Brand;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Menu from \"./Components/Menu\";\nimport Brand from \"./Components/Brand\";\n// import Error from \"./Components/Error\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Menu />\n        <Switch>\n          <Route path=\"/error\">\n          <Brand />\n          </Route>\n          <Route path=\"/:brand\">\n            <Brand />\n          </Route>\n          <Route path=\"./\">Please select brand...</Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}